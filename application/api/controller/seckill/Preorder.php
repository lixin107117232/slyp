<?phpnamespace app\api\controller\seckill;use addons\epay\library\Service;use app\api\controller\Pay;use app\common\controller\Api;use app\common\model\User;use EasyWeChatComposer\EasyWeChat;use Symfony\Component\HttpFoundation\Request;use think\Db;use think\Exception;use think\Log;/** * 预售订单接口 */class Preorder extends Api{    protected $noNeedLogin = ["pay", 'getOrder', 'firstClick', 'alipay_notify', 'ceshi'];    protected $noNeedRight = ['*'];    /**     * 订单列表     * 全部 1 待预售2 预售中3 待支付4 已完成 5     */    public function index()    {        $page = !$this->request->param('page') ? 1 : $this->request->param('page');//页        if (!$this->request->param('status')) $this->error("状态为空", "", 2);        $status = $this->request->param('status');        $where = "1=1";        $user = $this->auth->getUser();        if ($status == 2) {            $where = " status ='3' and start_time >" . time();        }        if ($status == 3) {            //状态:0=待支付,2=已取消,1=已完成,3=待预售            $where = "'" . time() . "'" . "between start_time and end_time and status !='1'";        }        if ($status == 4) {            $where = "'" . time() . "'" . "between start_time and end_time and (status ='0' or status ='3')";        }        if ($status == 5) {            $where = "status ='1' or status='2'";        }        $list = \app\common\model\seckill\Preorder::where($where)            ->where(["user_id" => $user["id"]])            ->order("createtime desc")            ->paginate(10, '', ['page' => $page, 'list_rows' => 10])            ->each(function ($v) {                if ((int)$v["status"] == 0 || (int)$v["status"] == 3) {                    if ($v["start_time"] <= time() && time() < $v["end_time"]) {                        if ((int)$v["status"] == 0 && $v["time_expire"] && $v["time_expire"] < time()) $v["over_status"] = 1;                        $v["pre_status"] = 2;                    }                    if ($v["start_time"] > time()) {                        $v["pre_status"] = 1;                    }                    if ($v["end_time"] < time()) {                        $v["pre_status"] = 3;                        $order = \app\common\model\seckill\Preorder::get($v["id"]);                        if ($order) {                            Db::startTrans();                            try {                                $order->status = 2;                                $order->status_remark = "用户超时未付款";                                $order->cancel_time = time();                                $order->save();                                Db::commit();                            } catch (Exception $e) {                                Db::rollback();                                $this->error($e->getMessage());                            }                        }                    }                }                if (empty($v["time_expire"])) $v["time_expire"] = $v["end_time"];                if ($v["time_expire"]) $v["time_expire"] = date("Y-m-d H:i:s", $v["time_expire"]);                if ($v["start_time"]) $v["start_time"] = date("Y-m-d H:i:s", $v["start_time"]);                if ($v["end_time"]) $v["end_time"] = date("Y-m-d H:i:s", $v["end_time"]);                if ($v["createtime"]) $v["createtime"] = date("Y-m-d H:i:s", $v["createtime"]);                $details = json_decode($v["goods_details"], true);                $v["goods_details"] = $details["allgoods"];            });        $this->success("成功", $list);    }    /*     * 详情     * */    public function details()    {        if (!$this->request->param('id')) $this->error("id为空", "", 2);        $list = \app\common\model\seckill\Preorder::field("*,FROM_UNIXTIME(paytime) paytime,        FROM_UNIXTIME(start_time) start_time,FROM_UNIXTIME(end_time) end_time,FROM_UNIXTIME(createtime) createtime        ")            ->where(['id' => $this->request->param('id')])->find();        $list["goods_details"] = json_decode($list["goods_details"], true);        $list["goods_details"] = $list["goods_details"]["allgoods"];        //if((int)$list["status"]==0 && $list["time_expire"]<time()) $list["over_status"]=1;        $this->success("成功", $list);    }    private function build_order_no()    {        return date('ymd') . substr(implode(NULL, array_map('ord', str_split(substr(uniqid(), 7, 13), 1))), 0, 8);    }    /*     * 首次点击支付     * */    public function firstClick()    {        if (!$this->request->param('id')) $this->error("订单id为空", "", 2);        $order = \app\common\model\seckill\Preorder::field("id,seckill_goods_id,price,specs_name,goods_details,        status,start_time,end_time")            ->where(["id" => $this->request->param('id')])->find();        $order["goods_details"] = json_decode($order["goods_details"], true);        $order["goods_details"] = $order["goods_details"]["allgoods"];        $this->success("成功", $order);    }    /*点击支付*/    public function getOrder()    {        if (!$this->request->param("address_id")) $this->error("地址id为空", '', 2);        if (!$this->request->param('id')) $this->error("订单id为空", "", 2);        if (!$this->request->param('pay_data')) $this->error("支付方式为空", "", 2);        $param = $this->request->param();        $user = $this->auth->getUser();        //$user["id"]=2;        $user = User::get($user["id"]);        $id = $this->request->param('id');        $site = \think\Config::get("site");        $order = \app\common\model\seckill\Preorder::get($id);        if ($order["start_time"] > time()) $this->error("未到预售时间，不能支付", "", 2);        if ($order["end_time"] < time()) $this->error("时间已过，不能支付", "", 2);        if ((int)$order["status"] != 0 && (int)$order["status"] != 3) $this->error("订单状态错误", "", 2);        if ((int)$param["pay_data"] == 1 && $user["money"] < $order["price"]) $this->error("用户余额不足", '', 2);        $details = json_decode($order["goods_details"], true);        if ((int)$param["pay_data"] == 2) {            //微信支付            $this->error("功能开发中", '', 2);        }        Db::startTrans();        try {            if ((int)$order["status"] == 0 || (int)$order["status"] == 3) {                //待支付的时候                $out_trade_no = $this->build_order_no();                $order->out_trade_no = $out_trade_no;                $order->status = '0';                $order->actual_money = $order["price"];                $order->pay_data = $param["pay_data"];                $order->time_expire = $order["end_time"];                $list = [];                $order->save();                $list = [];                if ((int)$param["pay_data"] == 3) {                    //支付宝支付                    $list = Service::submitOrder($order["price"], $out_trade_no,                        "alipay", $details["allgoods"]["name"],                        $this->request->domain() . '/api/seckill.Preorder/alipay_notify/paytype/alipay',                        $this->request->domain() . '/api/seckill.Preorder/alipay_notify/paytype/alipay',                        "app");                }                if ((int)$param["pay_data"] == 2) {                    //微信支付                    $list = Pay::wx_pay("抢购商品", $out_trade_no, $order["price"], '');                }            }            Db::commit();        } catch (Exception $e) {            Db::rollback();            $this->error($e->getMessage());        }        if ((int)$param["pay_data"] == 1) {            if (!$this->request->param('pay_pwd')) $this->error("支付密码为空", "", 2);            if (md5(md5($this->request->param('pay_pwd')) . $user["pay_salt"]) != $user["pay_pwd"]) $this->error("支付密码错误", "", 2);            Db::startTrans();            try {                \app\common\model\seckill\Preorder::where(["id" => $id])                    ->update([                        "status" => 1,                        "paytime" => time(),                    ]);                User::money(-($order["price"]), $user["id"], "购买商品");//:.$details["allgoods"]["name"]                User::money($details["price"], $user["id"], "售出商品");//:.$details["allgoods"]["name"]                /*User::where(["id"=>$user["id"]])->setInc("bonus",$details["price"]);                $this->auth->add_bonus_log(+($details["price"]), "购买预售商品:".$details["allgoods"]["name"]);                */                Db::commit();            } catch (Exception $e) {                Db::rollback();                $this->error($e->getMessage());            }            $this->success("支付成功");        }        $this->success(1, ["id" => $id, "list" => $list]);    }    /*支付*/    public function pay()    {        if (!$this->request->param('id')) $this->error("订单id为空", "", 2);        $user = $this->auth->getUser();        $id = $this->request->param('id');        $site = \think\Config::get("site");        $order = \app\common\model\seckill\Preorder::get($this->request->param('id'));        $details = json_decode($order["goods_details"], true);        if ($order["start_time"] > time()) $this->error("未到预售时间，不能支付", "", 2);        if ((int)$order["status"] != 0 && (int)$order["status"] != 3) $this->error("订单状态错误", "", 2);        if ((int)$order["pay_data"] == 1) {            if (!$this->request->param('pay_pwd')) $this->error("支付密码为空", "", 2);            if (md5(md5($this->request->param('pay_pwd')) . $user["pay_salt"]) != $user["pay_pwd"]) $this->error("支付密码错误", "", 2);            Db::startTrans();            try {                //余额支付                \app\common\model\seckill\Preorder::where(["id" => $id])                    ->update([                        "status" => 1,                        "paytime" => time(),                    ]);                User::money(-($order["all_money"]), $user["id"], "购买商品:" . $details["name"]);                $this->auth->add_bonus_log(+($order["all_money"]), $user["id"], "购买商品:" . $details["name"]);                $list = [];                if ($order["pay_data"] == 1) {                    //微信支付                    $out_trade_no = Pay::build_order_no();                    \app\common\model\seckill\Preorder::where(["id" => $id])->update(["out_trade_no" => $out_trade_no]);                    $list = Pay::wx_pay($details["name"], $out_trade_no, $order["all_money"]);                }                if ($order["pay_data"] == 2) {                    //支付宝支付                    $out_trade_no = Pay::build_order_no();                    \app\common\model\seckill\Preorder::where(["id" => $id])->update(["out_trade_no" => $out_trade_no]);                    /*$list = Pay::alipay($details["name"], $out_trade_no, $order["all_money"]);                    $this->success("", $list);*/                    $list = Service::submitOrder($order["price"], $out_trade_no,                        "alipay", $details["name"],                        $this->request->domain() . '/api/seckill.Preorder/alipay_notify/paytype/alipay',                        $this->request->domain() . '/api/seckill.Preorder/alipay_notify/paytype/alipay',                        "app");                }                Db::commit();            } catch (Exception $e) {                Db::rollback();                $this->error($e->getMessage());            }            $this->success("", $list);        }    }    /*回调*/    public function giftNot($data)    {        //if (!WeChat::checkSign($data)) {        if (!EasyWeChat::getEncryptionKey($data)) {            Log(['msg' => '微信回调签名错误', 'data' => $data], __DIR__);            return false;        }        $order = \app\common\model\seckill\Preorder::where(['out_trade_no' => $data['out_trade_no']])->find();        if (!$order || $order['status']) {            return false;        }        //状态:0=待支付,1=已支付,2=已取消,3=待发货,4=已发货,5=确认收货,6=维权,7=待选择,8=已完成        $order->status = 1;        $order->paytime = time();        //$goods->out_trade_no = $data["out_trade_no"];        $order->save();        \app\common\model\User::update(["is_agent" => 1], ["id" => $order["user_id"]]);        echo '<xml><return_code><![CDATA[SUCCESS]]></return_code><return_msg><![CDATA[OK]]></return_msg></xml>';    }    /*     * ceshi     * */    public function ceshi()    {        /*$out_trade_no=$this->build_order_no();        $list=Service::submitOrder(0.01, $out_trade_no,            "alipay", "测试支付",            $this->request->domain() . '/api/seckill.Preorder/alipay_notify/paytype/alipay',            $this->request->domain() . '/api/seckill.Preorder/alipay_notify/paytype/alipay',            "app");        dump($out_trade_no);        dump($list);die();*/        $ser = new Service();        $res = $ser->find($order = "21062910299102");        dump($res);        die();        if ($res) {            if ($res["trade_status"] == "TRADE_SUCCESS") {                //支付成功            } else {                //没有支付成功--取消订单                $return = $ser->cancel($order = "21062898101485");                if ($return) {                }            }        }        dump($res);        die();    }    /**     *支付宝回调     */    public function alipay_notify()    {        $request = Request::createFromGlobals();        $data = $request->request->count() > 0 ? $request->request->all() : $request->query->all();        Log::write($data, 'notice');        try {            //$payamount = $paytype == 'alipay' ? $data['total_amount'] : $data['total_fee'] / 100;            if ($data["trade_status"] == "TRADE_SUCCESS") {                //支付成功                $out_trade_no = $data['out_trade_no'];                $order = \app\common\model\seckill\Preorder::where(['out_trade_no' => $out_trade_no, "status" => 0])->find();                Log::write($order, 'notice');                if ($order) {                    $order->status = 1;//订单已完成                    $order->paytime = time();                    $order->save();                    $details = json_decode($order["goods_details"], true);                    User::money($details["price"], $order["user_id"], "售出商品");                }            }            /*User::where(["id"=>$order["user_id"]])->setInc("money",$details["price"]);            $this->auth->add_bonus_log(+($details["price"]), "购买预售商品:".$details["allgoods"]["name"]);*/            return 'success';        } catch (Exception $e) {            Log::write($e->getMessage(), 'error');            return 'failure';        }        die();        //原始订单号        $out_trade_no = input('out_trade_no');        //支付宝交易号        $trade_no = input('trade_no');        //交易状态        $trade_status = input('trade_status');        if ($trade_status == 'TRADE_FINISHED' || $trade_status == 'TRADE_SUCCESS') {            //支付成功            //自己的业务代码            $order = \app\common\model\seckill\Preorder::where(['out_trade_no' => $trade_no])->find();            $order->status = 1;//订单已完成            $order->paytime = time();            $this->auth->add_bonus_log(+($details["price"]), "购买预售商品:" . $details["allgoods"]["name"]);            //$goods->out_trade_no = $data["out_trade_no"];            $order->save();        } else {            //支付失败        }    }}